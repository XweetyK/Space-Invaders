// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Reg
#include <Reg.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_11_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",11,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_13_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",13,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_14_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",14,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_15_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",15,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_16_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",16,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_18_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",18,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_19_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",19,0x34f46a0a)

void Reg_obj::__construct() { }

Dynamic Reg_obj::__CreateEmpty() { return new Reg_obj; }

void *Reg_obj::_hx_vtable = 0;

Dynamic Reg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reg_obj > _hx_result = new Reg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Reg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x003e9134;
}

int Reg_obj::velocidadBala;

int Reg_obj::velocidadPlayerRIGHT;

int Reg_obj::velocidadPlayerLEFT;

int Reg_obj::velocidadPlayerIDLE;

int Reg_obj::cantVidas;

int Reg_obj::balaCont;

int Reg_obj::cantMaxBalas;


Reg_obj::Reg_obj()
{
}

bool Reg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"balaCont") ) { outValue = ( balaCont ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"cantVidas") ) { outValue = ( cantVidas ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cantMaxBalas") ) { outValue = ( cantMaxBalas ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"velocidadBala") ) { outValue = ( velocidadBala ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"velocidadPlayerLEFT") ) { outValue = ( velocidadPlayerLEFT ); return true; }
		if (HX_FIELD_EQ(inName,"velocidadPlayerIDLE") ) { outValue = ( velocidadPlayerIDLE ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"velocidadPlayerRIGHT") ) { outValue = ( velocidadPlayerRIGHT ); return true; }
	}
	return false;
}

bool Reg_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"balaCont") ) { balaCont=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"cantVidas") ) { cantVidas=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cantMaxBalas") ) { cantMaxBalas=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"velocidadBala") ) { velocidadBala=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"velocidadPlayerLEFT") ) { velocidadPlayerLEFT=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"velocidadPlayerIDLE") ) { velocidadPlayerIDLE=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"velocidadPlayerRIGHT") ) { velocidadPlayerRIGHT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Reg_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Reg_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Reg_obj::velocidadBala,HX_HCSTRING("velocidadBala","\x43","\x30","\x68","\xa5")},
	{hx::fsInt,(void *) &Reg_obj::velocidadPlayerRIGHT,HX_HCSTRING("velocidadPlayerRIGHT","\x4c","\x22","\xe3","\xc4")},
	{hx::fsInt,(void *) &Reg_obj::velocidadPlayerLEFT,HX_HCSTRING("velocidadPlayerLEFT","\x77","\xf3","\x3e","\xc9")},
	{hx::fsInt,(void *) &Reg_obj::velocidadPlayerIDLE,HX_HCSTRING("velocidadPlayerIDLE","\x84","\x92","\x42","\xc7")},
	{hx::fsInt,(void *) &Reg_obj::cantVidas,HX_HCSTRING("cantVidas","\xff","\x3b","\x41","\x49")},
	{hx::fsInt,(void *) &Reg_obj::balaCont,HX_HCSTRING("balaCont","\x06","\xd2","\xf8","\xdb")},
	{hx::fsInt,(void *) &Reg_obj::cantMaxBalas,HX_HCSTRING("cantMaxBalas","\x3f","\x01","\x35","\xa8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Reg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Reg_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Reg_obj::velocidadBala,"velocidadBala");
	HX_MARK_MEMBER_NAME(Reg_obj::velocidadPlayerRIGHT,"velocidadPlayerRIGHT");
	HX_MARK_MEMBER_NAME(Reg_obj::velocidadPlayerLEFT,"velocidadPlayerLEFT");
	HX_MARK_MEMBER_NAME(Reg_obj::velocidadPlayerIDLE,"velocidadPlayerIDLE");
	HX_MARK_MEMBER_NAME(Reg_obj::cantVidas,"cantVidas");
	HX_MARK_MEMBER_NAME(Reg_obj::balaCont,"balaCont");
	HX_MARK_MEMBER_NAME(Reg_obj::cantMaxBalas,"cantMaxBalas");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Reg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Reg_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Reg_obj::velocidadBala,"velocidadBala");
	HX_VISIT_MEMBER_NAME(Reg_obj::velocidadPlayerRIGHT,"velocidadPlayerRIGHT");
	HX_VISIT_MEMBER_NAME(Reg_obj::velocidadPlayerLEFT,"velocidadPlayerLEFT");
	HX_VISIT_MEMBER_NAME(Reg_obj::velocidadPlayerIDLE,"velocidadPlayerIDLE");
	HX_VISIT_MEMBER_NAME(Reg_obj::cantVidas,"cantVidas");
	HX_VISIT_MEMBER_NAME(Reg_obj::balaCont,"balaCont");
	HX_VISIT_MEMBER_NAME(Reg_obj::cantMaxBalas,"cantMaxBalas");
};

#endif

hx::Class Reg_obj::__mClass;

static ::String Reg_obj_sStaticFields[] = {
	HX_HCSTRING("velocidadBala","\x43","\x30","\x68","\xa5"),
	HX_HCSTRING("velocidadPlayerRIGHT","\x4c","\x22","\xe3","\xc4"),
	HX_HCSTRING("velocidadPlayerLEFT","\x77","\xf3","\x3e","\xc9"),
	HX_HCSTRING("velocidadPlayerIDLE","\x84","\x92","\x42","\xc7"),
	HX_HCSTRING("cantVidas","\xff","\x3b","\x41","\x49"),
	HX_HCSTRING("balaCont","\x06","\xd2","\xf8","\xdb"),
	HX_HCSTRING("cantMaxBalas","\x3f","\x01","\x35","\xa8"),
	::String(null())
};

void Reg_obj::__register()
{
	hx::Object *dummy = new Reg_obj;
	Reg_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Reg","\x34","\x91","\x3e","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reg_obj::__GetStatic;
	__mClass->mSetStaticField = &Reg_obj::__SetStatic;
	__mClass->mMarkFunc = Reg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reg_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Reg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Reg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Reg_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_11_boot)
HXDLIN(  11)		velocidadBala = (int)-145;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_13_boot)
HXDLIN(  13)		velocidadPlayerRIGHT = (int)60;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_14_boot)
HXDLIN(  14)		velocidadPlayerLEFT = (int)-60;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_15_boot)
HXDLIN(  15)		velocidadPlayerIDLE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_16_boot)
HXDLIN(  16)		cantVidas = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_18_boot)
HXDLIN(  18)		balaCont = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_19_boot)
HXDLIN(  19)		cantMaxBalas = (int)2;
            	}
}

