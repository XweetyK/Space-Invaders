// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_entities_Bala
#include <entities/Bala.h>
#endif
#ifndef INCLUDED_entities_Nave
#include <entities/Nave.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bbd47c6e518cffba_14_new,"entities.Nave","new",0xf2a28801,"entities.Nave.new","entities/Nave.hx",14,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_31_update,"entities.Nave","update",0xd9ee8908,"entities.Nave.update","entities/Nave.hx",31,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_39_playerLimit,"entities.Nave","playerLimit",0xa81084bb,"entities.Nave.playerLimit","entities/Nave.hx",39,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_52_playerShoot,"entities.Nave","playerShoot",0xaf36e75f,"entities.Nave.playerShoot","entities/Nave.hx",52,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_61_playerMove,"entities.Nave","playerMove",0xc6e2ad91,"entities.Nave.playerMove","entities/Nave.hx",61,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_81_get_PlayerBala,"entities.Nave","get_PlayerBala",0xf5abe45d,"entities.Nave.get_PlayerBala","entities/Nave.hx",81,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_86_get_playerScore,"entities.Nave","get_playerScore",0xe7adf4e9,"entities.Nave.get_playerScore","entities/Nave.hx",86,0xdb00a4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_bbd47c6e518cffba_91_playerAddScore,"entities.Nave","playerAddScore",0xe9afa3f1,"entities.Nave.playerAddScore","entities/Nave.hx",91,0xdb00a4ae)
namespace entities{

void Nave_obj::__construct(int X,int Y){
            	HX_GC_STACKFRAME(&_hx_pos_bbd47c6e518cffba_14_new)
HXLINE(  16)		this->PlayerBala =  ::entities::Bala_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  20)		super::__construct(X,Y,null());
HXLINE(  22)		this->loadGraphic(HX_("assets/images/PlayerNave.png",e9,a1,aa,60),null(),null(),null(),null(),null());
HXLINE(  24)		 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN(  24)		_hx_tmp->add(this->get_PlayerBala()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  25)		this->get_PlayerBala()->kill();
HXLINE(  27)		this->playerScore = (int)0;
            	}

Dynamic Nave_obj::__CreateEmpty() { return new Nave_obj; }

void *Nave_obj::_hx_vtable = 0;

Dynamic Nave_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Nave_obj > _hx_result = new Nave_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Nave_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ca67603) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x1ca67603;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Nave_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_31_update)
HXLINE(  32)		this->super::update(elapsed);
HXLINE(  33)		this->playerMove();
HXLINE(  34)		this->playerShoot();
HXLINE(  35)		this->playerLimit();
            	}


void Nave_obj::playerLimit(){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_39_playerLimit)
HXLINE(  40)		if ((this->x < (int)0)) {
HXLINE(  42)			this->set_x((int)0);
            		}
HXLINE(  44)		if ((this->x > (int)152)) {
HXLINE(  46)			this->set_x((int)152);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Nave_obj,playerLimit,(void))

void Nave_obj::playerShoot(){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_52_playerShoot)
HXDLIN(  52)		bool _hx_tmp;
HXDLIN(  52)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  52)		if (_this->keyManager->checkStatus((int)32,_this->status)) {
HXDLIN(  52)			_hx_tmp = !(this->get_PlayerBala()->alive);
            		}
            		else {
HXDLIN(  52)			_hx_tmp = false;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  54)			 ::entities::Bala _hx_tmp1 = this->get_PlayerBala();
HXDLIN(  54)			Float _hx_tmp2 = this->x;
HXDLIN(  54)			_hx_tmp1->reset(_hx_tmp2,(this->y - (int)3));
HXLINE(  56)			this->get_PlayerBala()->velocity->set_y(::Reg_obj::velocidadBala);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Nave_obj,playerShoot,(void))

void Nave_obj::playerMove(){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_61_playerMove)
HXLINE(  63)		this->velocity->set_x(::Reg_obj::velocidadPlayerIDLE);
HXLINE(  65)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  65)		if (_this->keyManager->checkStatus((int)39,_this->status)) {
HXLINE(  67)			this->velocity->set_x(::Reg_obj::velocidadPlayerRIGHT);
            		}
HXLINE(  69)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  69)		if (_this1->keyManager->checkStatus((int)37,_this1->status)) {
HXLINE(  71)			this->velocity->set_x(::Reg_obj::velocidadPlayerLEFT);
            		}
HXLINE(  73)		bool _hx_tmp;
HXDLIN(  73)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  73)		if (_this2->keyManager->checkStatus((int)39,_this2->status)) {
HXLINE(  73)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  73)			_hx_tmp = _this3->keyManager->checkStatus((int)37,_this3->status);
            		}
            		else {
HXLINE(  73)			_hx_tmp = false;
            		}
HXDLIN(  73)		if (_hx_tmp) {
HXLINE(  75)			this->velocity->set_x(::Reg_obj::velocidadPlayerIDLE);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Nave_obj,playerMove,(void))

 ::entities::Bala Nave_obj::get_PlayerBala(){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_81_get_PlayerBala)
HXDLIN(  81)		return this->PlayerBala;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Nave_obj,get_PlayerBala,return )

int Nave_obj::get_playerScore(){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_86_get_playerScore)
HXDLIN(  86)		return this->playerScore;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Nave_obj,get_playerScore,return )

void Nave_obj::playerAddScore(int points){
            	HX_STACKFRAME(&_hx_pos_bbd47c6e518cffba_91_playerAddScore)
HXDLIN(  91)		 ::entities::Nave _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  91)		_hx_tmp->playerScore = (_hx_tmp->playerScore + points);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Nave_obj,playerAddScore,(void))


hx::ObjectPtr< Nave_obj > Nave_obj::__new(int X,int Y) {
	hx::ObjectPtr< Nave_obj > __this = new Nave_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< Nave_obj > Nave_obj::__alloc(hx::Ctx *_hx_ctx,int X,int Y) {
	Nave_obj *__this = (Nave_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Nave_obj), true, "entities.Nave"));
	*(void **)__this = Nave_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

Nave_obj::Nave_obj()
{
}

void Nave_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Nave);
	HX_MARK_MEMBER_NAME(PlayerBala,"PlayerBala");
	HX_MARK_MEMBER_NAME(playerScore,"playerScore");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Nave_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(PlayerBala,"PlayerBala");
	HX_VISIT_MEMBER_NAME(playerScore,"playerScore");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Nave_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"PlayerBala") ) { return hx::Val( inCallProp == hx::paccAlways ? get_PlayerBala() : PlayerBala ); }
		if (HX_FIELD_EQ(inName,"playerMove") ) { return hx::Val( playerMove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerScore") ) { return hx::Val( inCallProp == hx::paccAlways ? get_playerScore() : playerScore ); }
		if (HX_FIELD_EQ(inName,"playerLimit") ) { return hx::Val( playerLimit_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerShoot") ) { return hx::Val( playerShoot_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_PlayerBala") ) { return hx::Val( get_PlayerBala_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerAddScore") ) { return hx::Val( playerAddScore_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_playerScore") ) { return hx::Val( get_playerScore_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Nave_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"PlayerBala") ) { PlayerBala=inValue.Cast<  ::entities::Bala >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerScore") ) { playerScore=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Nave_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("PlayerBala","\x15","\xc2","\x83","\x9a"));
	outFields->push(HX_HCSTRING("playerScore","\x31","\x18","\xb8","\x7f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Nave_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::entities::Bala*/ ,(int)offsetof(Nave_obj,PlayerBala),HX_HCSTRING("PlayerBala","\x15","\xc2","\x83","\x9a")},
	{hx::fsInt,(int)offsetof(Nave_obj,playerScore),HX_HCSTRING("playerScore","\x31","\x18","\xb8","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Nave_obj_sStaticStorageInfo = 0;
#endif

static ::String Nave_obj_sMemberFields[] = {
	HX_HCSTRING("PlayerBala","\x15","\xc2","\x83","\x9a"),
	HX_HCSTRING("playerScore","\x31","\x18","\xb8","\x7f"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("playerLimit","\x1a","\xc4","\xdf","\x7b"),
	HX_HCSTRING("playerShoot","\xbe","\x26","\x06","\x83"),
	HX_HCSTRING("playerMove","\x12","\xbf","\x22","\xab"),
	HX_HCSTRING("get_PlayerBala","\x5e","\x4a","\x79","\x10"),
	HX_HCSTRING("get_playerScore","\xc8","\xcf","\x99","\x40"),
	HX_HCSTRING("playerAddScore","\xf2","\x09","\x7d","\x04"),
	::String(null()) };

static void Nave_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Nave_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Nave_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Nave_obj::__mClass,"__mClass");
};

#endif

hx::Class Nave_obj::__mClass;

void Nave_obj::__register()
{
	hx::Object *dummy = new Nave_obj;
	Nave_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entities.Nave","\x8f","\x73","\xe4","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Nave_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Nave_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Nave_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Nave_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Nave_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Nave_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entities
