// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_entities_Alien
#include <entities/Alien.h>
#endif
#ifndef INCLUDED_entities_AlienBala
#include <entities/AlienBala.h>
#endif
#ifndef INCLUDED_entities_Bala
#include <entities/Bala.h>
#endif
#ifndef INCLUDED_entities_Barrera
#include <entities/Barrera.h>
#endif
#ifndef INCLUDED_entities_Nave
#include <entities/Nave.h>
#endif
#ifndef INCLUDED_entities_Ovni
#include <entities/Ovni.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_17_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",17,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_30_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",30,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_36_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",36,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_48_playerDeath,"PlayState","playerDeath",0xe74b8182,"PlayState.playerDeath","PlayState.hx",48,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_66_collision,"PlayState","collision",0x178d6c21,"PlayState.collision","PlayState.hx",66,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_143_cleanScreen,"PlayState","cleanScreen",0x3e42bb44,"PlayState.cleanScreen","PlayState.hx",143,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_156_Inicializar,"PlayState","Inicializar",0x583742e6,"PlayState.Inicializar","PlayState.hx",156,0xb30d7781)
static const int _hx_array_data_46c2835d_18[] = {
	(int)-16776961,(int)-16744448,(int)-16744448,(int)-256,(int)-65536,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_204_gameOver,"PlayState","gameOver",0x64a21997,"PlayState.gameOver","PlayState.hx",204,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_220_destroy,"PlayState","destroy",0x6ec756e9,"PlayState.destroy","PlayState.hx",220,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_17_new)
HXDLIN(  17)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_30_create)
HXLINE(  31)		this->super::create();
HXLINE(  32)		this->Inicializar();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_36_update)
HXLINE(  37)		this->super::update(elapsed);
HXLINE(  39)		 ::flixel::text::FlxText _hx_tmp = this->playerContVidas;
HXDLIN(  39)		_hx_tmp->set_text((HX_("Lifes: ",3d,52,d1,51) + this->playerVidas));
HXLINE(  41)		 ::flixel::text::FlxText _hx_tmp1 = this->playerContScore;
HXDLIN(  41)		_hx_tmp1->set_text((HX_("Score: ",58,c6,eb,45) + this->player->get_playerScore()));
HXLINE(  42)		this->gameOver();
HXLINE(  43)		this->collision();
            	}


void PlayState_obj::playerDeath(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_48_playerDeath)
HXLINE(  49)		this->player->kill();
HXLINE(  50)		 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)		_hx_tmp->playerVidas = (_hx_tmp->playerVidas - (int)1);
HXLINE(  52)		if ((this->playerVidas > (int)0)) {
HXLINE(  54)			this->player->revive();
HXLINE(  55)			this->player->set_x((int)80);
HXLINE(  56)			this->player->set_y((int)132);
            		}
            		else {
HXLINE(  60)			this->cleanScreen();
HXLINE(  61)			this->playerLose->revive();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,playerDeath,(void))

void PlayState_obj::collision(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_66_collision)
HXLINE(  68)		{
HXLINE(  68)			int _g1 = (int)0;
HXDLIN(  68)			int _g = this->alien->members->get_length();
HXDLIN(  68)			while((_g1 < _g)){
HXLINE(  68)				_g1 = (_g1 + (int)1);
HXDLIN(  68)				int i = (_g1 - (int)1);
HXLINE(  70)				 ::entities::Bala _hx_tmp = this->player->get_PlayerBala();
HXDLIN(  70)				if (::flixel::FlxG_obj::overlap(_hx_tmp,Dynamic( this->alien->members->__get(i)).StaticCast<  ::entities::Alien >(),null(),null())) {
HXLINE(  72)					Dynamic( this->alien->members->__get(i)).StaticCast<  ::entities::Alien >()->kill();
HXLINE(  73)					this->player->get_PlayerBala()->kill();
HXLINE(  74)					this->player->playerAddScore((int)25);
            				}
            			}
            		}
HXLINE(  78)		{
HXLINE(  78)			int _g11 = (int)0;
HXDLIN(  78)			int _g2 = this->alien->members->get_length();
HXDLIN(  78)			while((_g11 < _g2)){
HXLINE(  78)				_g11 = (_g11 + (int)1);
HXDLIN(  78)				int i1 = (_g11 - (int)1);
HXLINE(  80)				 ::entities::Nave _hx_tmp1 = this->player;
HXDLIN(  80)				if (::flixel::FlxG_obj::overlap(_hx_tmp1,Dynamic( this->alien->members->__get(i1)).StaticCast<  ::entities::Alien >(),null(),null())) {
HXLINE(  82)					Dynamic( this->alien->members->__get(i1)).StaticCast<  ::entities::Alien >()->kill();
HXLINE(  83)					this->playerDeath();
HXLINE(  84)					this->player->playerAddScore((int)25);
            				}
            			}
            		}
HXLINE(  88)		{
HXLINE(  88)			int _g12 = (int)0;
HXDLIN(  88)			int _g3 = this->alien->members->get_length();
HXDLIN(  88)			while((_g12 < _g3)){
HXLINE(  88)				_g12 = (_g12 + (int)1);
HXDLIN(  88)				int i2 = (_g12 - (int)1);
HXLINE(  90)				 ::entities::AlienBala _hx_tmp2 = Dynamic( this->alien->members->__get(i2)).StaticCast<  ::entities::Alien >()->get_disp();
HXDLIN(  90)				if (::flixel::FlxG_obj::overlap(_hx_tmp2,this->player,null(),null())) {
HXLINE(  92)					this->playerDeath();
HXLINE(  93)					Dynamic( this->alien->members->__get(i2)).StaticCast<  ::entities::Alien >()->get_disp()->destroy();
HXLINE(  94)					::Reg_obj::balaCont--;
            				}
            			}
            		}
HXLINE(  98)		{
HXLINE(  98)			int _g13 = (int)0;
HXDLIN(  98)			int _g4 = this->alien->members->get_length();
HXDLIN(  98)			while((_g13 < _g4)){
HXLINE(  98)				_g13 = (_g13 + (int)1);
HXDLIN(  98)				int i3 = (_g13 - (int)1);
HXLINE( 100)				if ((Dynamic( this->alien->members->__get(i3)).StaticCast<  ::entities::Alien >()->y == (int)160)) {
HXLINE( 102)					this->playerDeath();
HXLINE( 103)					this->cleanScreen();
HXLINE( 104)					this->playerLose->revive();
            				}
            			}
            		}
HXLINE( 108)		 ::entities::Bala _hx_tmp3 = this->player->get_PlayerBala();
HXDLIN( 108)		if (::flixel::FlxG_obj::overlap(_hx_tmp3,this->ovni,null(),null())) {
HXLINE( 110)			this->ovni->set_x((int)-200);
HXLINE( 111)			this->player->get_PlayerBala()->kill();
HXLINE( 112)			this->player->playerAddScore((int)100);
            		}
HXLINE( 115)		{
HXLINE( 115)			int _g14 = (int)0;
HXDLIN( 115)			int _g5 = this->alien->members->get_length();
HXDLIN( 115)			while((_g14 < _g5)){
HXLINE( 115)				_g14 = (_g14 + (int)1);
HXDLIN( 115)				int i4 = (_g14 - (int)1);
HXLINE( 117)				{
HXLINE( 117)					int _g21 = (int)0;
HXDLIN( 117)					while((_g21 < (int)4)){
HXLINE( 117)						_g21 = (_g21 + (int)1);
HXDLIN( 117)						int j = (_g21 - (int)1);
HXLINE( 119)						 ::entities::AlienBala _hx_tmp4 = Dynamic( this->alien->members->__get(i4)).StaticCast<  ::entities::Alien >()->get_disp();
HXDLIN( 119)						if (::flixel::FlxG_obj::overlap(_hx_tmp4,Dynamic( this->barreras->members->__get(j)).StaticCast<  ::entities::Barrera >(),null(),null())) {
HXLINE( 121)							Dynamic( this->barreras->members->__get(j)).StaticCast<  ::entities::Barrera >()->destroy();
HXLINE( 122)							Dynamic( this->alien->members->__get(i4)).StaticCast<  ::entities::Alien >()->get_disp()->destroy();
HXLINE( 123)							::Reg_obj::balaCont--;
            						}
            					}
            				}
            			}
            		}
HXLINE( 128)		{
HXLINE( 128)			int _g15 = (int)0;
HXDLIN( 128)			int _g6 = this->alien->members->get_length();
HXDLIN( 128)			while((_g15 < _g6)){
HXLINE( 128)				_g15 = (_g15 + (int)1);
HXDLIN( 128)				int i5 = (_g15 - (int)1);
HXLINE( 130)				{
HXLINE( 130)					int _g22 = (int)0;
HXDLIN( 130)					while((_g22 < (int)4)){
HXLINE( 130)						_g22 = (_g22 + (int)1);
HXDLIN( 130)						int j1 = (_g22 - (int)1);
HXLINE( 132)						 ::entities::Alien _hx_tmp5 = Dynamic( this->alien->members->__get(i5)).StaticCast<  ::entities::Alien >();
HXDLIN( 132)						if (::flixel::FlxG_obj::overlap(_hx_tmp5,Dynamic( this->barreras->members->__get(j1)).StaticCast<  ::entities::Barrera >(),null(),null())) {
HXLINE( 134)							Dynamic( this->barreras->members->__get(j1)).StaticCast<  ::entities::Barrera >()->destroy();
HXLINE( 135)							Dynamic( this->alien->members->__get(i5)).StaticCast<  ::entities::Alien >()->destroy();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,collision,(void))

void PlayState_obj::cleanScreen(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_143_cleanScreen)
HXLINE( 144)		this->alien->kill();
HXLINE( 145)		{
HXLINE( 145)			int _g1 = (int)0;
HXDLIN( 145)			int _g = this->alien->members->get_length();
HXDLIN( 145)			while((_g1 < _g)){
HXLINE( 145)				_g1 = (_g1 + (int)1);
HXDLIN( 145)				int i = (_g1 - (int)1);
HXLINE( 147)				Dynamic( this->alien->members->__get(i)).StaticCast<  ::entities::Alien >()->get_disp()->kill();
            			}
            		}
HXLINE( 149)		this->player->get_PlayerBala()->destroy();
HXLINE( 150)		this->player->destroy();
HXLINE( 151)		this->ovni->destroy();
HXLINE( 152)		this->barreras->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cleanScreen,(void))

void PlayState_obj::Inicializar(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_156_Inicializar)
HXLINE( 157)		this->alien =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 158)		::Array< int > color;
HXLINE( 159)		 ::flixel::FlxSprite sprite;
HXLINE( 160)		color = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_18,5);
HXLINE( 161)		{
HXLINE( 161)			int _g = (int)0;
HXDLIN( 161)			while((_g < (int)50)){
HXLINE( 161)				_g = (_g + (int)1);
HXDLIN( 161)				int i = (_g - (int)1);
HXLINE( 163)				int _hx_tmp = ((int)20 + (::Std_obj::_hx_int(((Float)i / (Float)(int)10)) * (int)10));
HXDLIN( 163)				this->a =  ::entities::Alien_obj::__alloc( HX_CTX ,((int)15 + (hx::Mod(i,(int)10) * (int)12)),_hx_tmp,color->__get(::Std_obj::_hx_int(((Float)i / (Float)(int)10))));
HXLINE( 164)				this->alien->add(this->a).StaticCast<  ::entities::Alien >();
            			}
            		}
HXLINE( 167)		this->barreras =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 168)		{
HXLINE( 168)			int _g1 = (int)0;
HXDLIN( 168)			while((_g1 < (int)4)){
HXLINE( 168)				_g1 = (_g1 + (int)1);
HXDLIN( 168)				int i1 = (_g1 - (int)1);
HXLINE( 170)				this->b =  ::entities::Barrera_obj::__alloc( HX_CTX ,((int)10 + (hx::Mod(i1,(int)10) * (int)41)),(int)115);
HXLINE( 171)				this->barreras->add(this->b).StaticCast<  ::entities::Barrera >();
            			}
            		}
HXLINE( 174)		this->add(this->barreras);
HXLINE( 175)		this->player =  ::entities::Nave_obj::__alloc( HX_CTX ,(int)80,(int)132);
HXLINE( 176)		this->playerLose =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)1,(int)65,(int)480,HX_("You died! Press R to restart",59,12,4c,8d),(int)9,null());
HXLINE( 177)		this->playerContVidas =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)480,HX_("",00,00,00,00),(int)9,null());
HXLINE( 178)		this->playerContScore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)1,(int)125,(int)480,HX_("",00,00,00,00),(int)8,null());
HXLINE( 179)		this->ovni =  ::entities::Ovni_obj::__alloc( HX_CTX ,(int)-200,(int)10);
HXLINE( 181)		this->add(this->alien);
HXLINE( 182)		this->add(this->player);
HXLINE( 183)		this->add(this->ovni);
HXLINE( 184)		this->player->kill();
HXLINE( 185)		this->alien->kill();
HXLINE( 186)		this->ovni->kill();
HXLINE( 187)		this->barreras->kill();
HXLINE( 188)		this->player->revive();
HXLINE( 189)		this->alien->revive();
HXLINE( 190)		this->ovni->revive();
HXLINE( 191)		this->barreras->revive();
HXLINE( 193)		this->playerLose->kill();
HXLINE( 194)		this->playerVidas = ::Reg_obj::cantVidas;
HXLINE( 196)		this->add(this->playerContVidas);
HXLINE( 197)		this->add(this->playerContScore);
HXLINE( 198)		this->add(this->playerLose);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,Inicializar,(void))

void PlayState_obj::gameOver(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_204_gameOver)
HXDLIN( 204)		if (this->playerLose->alive) {
HXLINE( 206)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 206)			if (_this->keyManager->checkStatus((int)82,_this->status)) {
HXLINE( 208)				this->playerLose->kill();
HXLINE( 209)				this->playerContVidas->destroy();
HXLINE( 210)				this->playerContScore->destroy();
HXLINE( 211)				this->playerLose->destroy();
HXLINE( 212)				this->alien->destroy();
HXLINE( 213)				this->ovni->destroy();
HXLINE( 214)				this->barreras->destroy();
HXLINE( 215)				this->Inicializar();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,gameOver,(void))

void PlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_220_destroy)
HXLINE( 221)		::flixel::FlxG_obj::game->_state->remove(hx::ObjectPtr<OBJ_>(this),null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 222)		this->super::destroy();
            	}



hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(alien,"alien");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(barreras,"barreras");
	HX_MARK_MEMBER_NAME(playerLose,"playerLose");
	HX_MARK_MEMBER_NAME(playerContVidas,"playerContVidas");
	HX_MARK_MEMBER_NAME(playerContScore,"playerContScore");
	HX_MARK_MEMBER_NAME(playerVidas,"playerVidas");
	HX_MARK_MEMBER_NAME(ovni,"ovni");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(alien,"alien");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(barreras,"barreras");
	HX_VISIT_MEMBER_NAME(playerLose,"playerLose");
	HX_VISIT_MEMBER_NAME(playerContVidas,"playerContVidas");
	HX_VISIT_MEMBER_NAME(playerContScore,"playerContScore");
	HX_VISIT_MEMBER_NAME(playerVidas,"playerVidas");
	HX_VISIT_MEMBER_NAME(ovni,"ovni");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ovni") ) { return hx::Val( ovni ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alien") ) { return hx::Val( alien ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barreras") ) { return hx::Val( barreras ); }
		if (HX_FIELD_EQ(inName,"gameOver") ) { return hx::Val( gameOver_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"collision") ) { return hx::Val( collision_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerLose") ) { return hx::Val( playerLose ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerVidas") ) { return hx::Val( playerVidas ); }
		if (HX_FIELD_EQ(inName,"playerDeath") ) { return hx::Val( playerDeath_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanScreen") ) { return hx::Val( cleanScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"Inicializar") ) { return hx::Val( Inicializar_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerContVidas") ) { return hx::Val( playerContVidas ); }
		if (HX_FIELD_EQ(inName,"playerContScore") ) { return hx::Val( playerContScore ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast<  ::entities::Alien >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast<  ::entities::Barrera >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ovni") ) { ovni=inValue.Cast<  ::entities::Ovni >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alien") ) { alien=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::entities::Nave >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barreras") ) { barreras=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerLose") ) { playerLose=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerVidas") ) { playerVidas=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerContVidas") ) { playerContVidas=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerContScore") ) { playerContScore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alien","\x07","\x55","\x91","\x21"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("barreras","\x5e","\x55","\x68","\x22"));
	outFields->push(HX_HCSTRING("playerLose","\xd6","\x85","\x79","\xaa"));
	outFields->push(HX_HCSTRING("playerContVidas","\x10","\x7a","\x5f","\x55"));
	outFields->push(HX_HCSTRING("playerContScore","\x5f","\xdc","\x3c","\x97"));
	outFields->push(HX_HCSTRING("playerVidas","\xe2","\xb5","\xda","\x3d"));
	outFields->push(HX_HCSTRING("ovni","\x22","\x99","\xb8","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,alien),HX_HCSTRING("alien","\x07","\x55","\x91","\x21")},
	{hx::fsObject /*::entities::Nave*/ ,(int)offsetof(PlayState_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*::entities::Alien*/ ,(int)offsetof(PlayState_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsObject /*::entities::Barrera*/ ,(int)offsetof(PlayState_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,barreras),HX_HCSTRING("barreras","\x5e","\x55","\x68","\x22")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,playerLose),HX_HCSTRING("playerLose","\xd6","\x85","\x79","\xaa")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,playerContVidas),HX_HCSTRING("playerContVidas","\x10","\x7a","\x5f","\x55")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,playerContScore),HX_HCSTRING("playerContScore","\x5f","\xdc","\x3c","\x97")},
	{hx::fsInt,(int)offsetof(PlayState_obj,playerVidas),HX_HCSTRING("playerVidas","\xe2","\xb5","\xda","\x3d")},
	{hx::fsObject /*::entities::Ovni*/ ,(int)offsetof(PlayState_obj,ovni),HX_HCSTRING("ovni","\x22","\x99","\xb8","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("alien","\x07","\x55","\x91","\x21"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("barreras","\x5e","\x55","\x68","\x22"),
	HX_HCSTRING("playerLose","\xd6","\x85","\x79","\xaa"),
	HX_HCSTRING("playerContVidas","\x10","\x7a","\x5f","\x55"),
	HX_HCSTRING("playerContScore","\x5f","\xdc","\x3c","\x97"),
	HX_HCSTRING("playerVidas","\xe2","\xb5","\xda","\x3d"),
	HX_HCSTRING("ovni","\x22","\x99","\xb8","\x49"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("playerDeath","\x13","\x34","\xfd","\xdd"),
	HX_HCSTRING("collision","\x72","\xa8","\x3a","\xdb"),
	HX_HCSTRING("cleanScreen","\xd5","\x6d","\xf4","\x34"),
	HX_HCSTRING("Inicializar","\x77","\xf5","\xe8","\x4e"),
	HX_HCSTRING("gameOver","\x66","\x92","\xde","\xb5"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

